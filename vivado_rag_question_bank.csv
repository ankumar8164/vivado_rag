Question,Golden Answer,Pages
How can I add enumerations using TCL commands?,"The add_hw_probe_enum command, associates an enumeration name-value pair to a debug probe. You can add add_hw_probe commands to a Tcl file, to have the definitions appear in a separate file.",214
What key settings can I use when generating an encrypted bitstream?,"When generating an encrypted bitstream you can specify a Starting AES encryption key (key0) of up to 64 hexadecimal characters (256 bits), which is written to a .nky file for use by the BBR or programming into the eFUSE key register; you may alternatively supply an input encryption file (an existing .nky file) to load your AES key, HMAC, and CBC settings instead of entering them manually; you can also set the Starting AES initial vector (IV0) that initializes the first key, as well as the Starting obfuscate initial vector (Obfuscate IV0) used for key obfuscation. By default these values are stored in your project’s constraints file, but if you wish to avoid that you can rely on an input encryption file instead.",82
I need to both watch a signal’s value in the Waveform window and use that same signal to kick off a capture. What probe type should I pick?,"You should choose Trigger and Data, because that mode lets the probe participate in trigger conditions and record its values for viewing. If you set it to Data only, you’ll see the signal values but won’t be able to use it to trigger or set up capture conditions. If you pick Trigger only, the probe can fire your capture when the condition is met, but it won’t record any data for you to inspect afterward.",142
How can I create a custom debug probe on an ILA core in the Vivado Hardware Manager?,"In the Vivado IDE’s Hardware Manager, right-click the ILA core you want to probe and choose Create User Defined Probe. That opens a dialog where you select the ILA core, give your new probe a name, and pick the probe bits or constants that make up the probe. To include specific bits, simply click the + button and choose Add Probe.",184
"I need to both validate and optimize my FPGA’s high-speed serial links in-system and, at the same time, issue AXI reads and writes over JTAG without a processor.","Add the IBERT core from the Debug category in the IP Catalog to perform in-system serial I/O validation, measure bit-error ratios, and run margin analysis on your high-speed links; then add the JTAG-to-AXI Master core (also under Debug) to generate and drive AXI Full or AXI-Lite transactions over the JTAG interface at run time, even in designs without a processor. Configure each IP in Vivado, program your device, and control IBERT tests and AXI transactions directly from the Hardware Manager.","10, 11"
Can I get some information on how to do serial I/O hardware debugging in Vivado?,"The flow has three phases: (1) generate the IBERT core with your high-speed requirements, (2) generate and implement its example design, and (3) interact with the programmed IP in Hardware Manager to run measurements.",288
I’d like to script an IBERT eye-scan on my KC705 board using Vivado’s Tcl interface,"First, connect your Tcl session to the Vivado hardware server and the KC705 board’s JTAG cable, for example with `connect_hw_server -url localhost:3121`, `current_hw_target [get_hw_targets */digilent-plugin/SN:12345]`, and `open_hw_target`. Then select and program the XC7K325T device by grabbing it via `current_hw_device [lindex [get_hw_devices] 0]`, refreshing its probes (`refresh_hw_device -update_hw_probes false …`), setting its `.bit` file with `set_property PROGRAM.FILE {C:/design.bit} …`, programming it (`program_hw_devices …`), and refreshing again. Next, establish the serial link in PCS loopback by binding the first GT TX and RX ports (`set tx0 [lindex [get_hw_sio_txs] 0]` and `set rx0 [lindex [get_hw_sio_rxs] 0]`), creating the SIO link (`set link0 [create_hw_sio_link $tx0 $rx0]`), setting its `LOOPBACK` property to “Near-End PCS”, and committing that configuration (`commit_hw_sio $link0`). Finally, define a 2D full-eye scan (`set scan0 [create_hw_sio_scan 2d_full_eye [get_hw_sio_rxs -of $link0]]`), run it (`run_hw_sio_scan $scan0`), display it in the GUI (`display_hw_sio_scan $scan0`), and write the results to a CSV file with `write_hw_sio_scan ""scan0.csv"" $scan0`.",310
"When I enable Auto Re-trigger on an ILA core, I notice I sometimes miss signal cycles between captures. How can I fix that?","Even though Auto Re-trigger immediately rearms the ILA and begins a new capture as soon as the previous buffer fills, there’s an unavoidable delay between the moment the buffer fills and when the GUI uploads and displays that data. During that upload-and-display interval the ILA isn’t actively capturing, so any signal activity in those cycles will be missed before the ILA retriggers and refills its buffer.",203
How do I add probes from my ILA core into the Waveform window?,"To add probes from your ILA core into the Waveform window, open the Debug Probes pane for the ILA core, select the signals or buses you want, right-click and choose “Add Probes to Waveform,” and they will appear in the Waveform window. You can also script this if you use the Tcl command add_wave –into {hw_ila_data_1.wcfg} –radix hex {{counter1}}, which adds the counter1 probe to the ILA’s waveform configuration and sets its display radix to hexadecimal.",260
How can I read on-chip temperature data at run time?,"Vivado’s System Monitor (SYSMON) core lets you measure die temperature and supply voltages via on-chip ADCs. After programming your device, refresh the hardware to create an hw_sysmon object under your device in the Hardware Manager. You can then access all temperature and voltage registers by calling get_hw_sysmon_reg on that object. Each supported device automatically adds one or more SYSMON objects when you run refresh_hw_device, and you can also view live plots in the System Monitor dashboard or script regular reads of the status registers for logging or automated checks.",104